//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DefaultAPI {
    /**
     Create a new sub-account
     
     - parameter accountId: (path) ID 
     - parameter accountName: (form) The name of the new sub-account. 
     - parameter accountSisAccountId: (form) The account&#39;s identifier in the Student Information System. (optional)
     - parameter accountDefaultStorageQuotaMb: (form) The default course storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultUserStorageQuotaMb: (form) The default user storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultGroupStorageQuotaMb: (form) The default group storage quota to be used, if not otherwise specified. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewSubAccount(accountId: String, accountName: String, accountSisAccountId: String? = nil, accountDefaultStorageQuotaMb: Int64? = nil, accountDefaultUserStorageQuotaMb: Int64? = nil, accountDefaultGroupStorageQuotaMb: Int64? = nil, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        createNewSubAccountWithRequestBuilder(accountId: accountId, accountName: accountName, accountSisAccountId: accountSisAccountId, accountDefaultStorageQuotaMb: accountDefaultStorageQuotaMb, accountDefaultUserStorageQuotaMb: accountDefaultUserStorageQuotaMb, accountDefaultGroupStorageQuotaMb: accountDefaultGroupStorageQuotaMb).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new sub-account
     - POST /v1/accounts/{account_id}/sub_accounts
     - Add a new sub-account to a given account.
     - parameter accountId: (path) ID 
     - parameter accountName: (form) The name of the new sub-account. 
     - parameter accountSisAccountId: (form) The account&#39;s identifier in the Student Information System. (optional)
     - parameter accountDefaultStorageQuotaMb: (form) The default course storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultUserStorageQuotaMb: (form) The default user storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultGroupStorageQuotaMb: (form) The default group storage quota to be used, if not otherwise specified. (optional)
     - returns: RequestBuilder<Account> 
     */
    open class func createNewSubAccountWithRequestBuilder(accountId: String, accountName: String, accountSisAccountId: String? = nil, accountDefaultStorageQuotaMb: Int64? = nil, accountDefaultUserStorageQuotaMb: Int64? = nil, accountDefaultGroupStorageQuotaMb: Int64? = nil) -> RequestBuilder<Account> {
        var path = "/v1/accounts/{account_id}/sub_accounts"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let formParams: [String:Any?] = [
            "account[name]": accountName.encodeToJSON(),
            "account[sis_account_id]": accountSisAccountId?.encodeToJSON(),
            "account[default_storage_quota_mb]": accountDefaultStorageQuotaMb?.encodeToJSON(),
            "account[default_user_storage_quota_mb]": accountDefaultUserStorageQuotaMb?.encodeToJSON(),
            "account[default_group_storage_quota_mb]": accountDefaultGroupStorageQuotaMb?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a sub-account
     
     - parameter accountId: (path) ID 
     - parameter id: (path) ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubAccount(accountId: String, id: String, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        deleteSubAccountWithRequestBuilder(accountId: accountId, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a sub-account
     - DELETE /v1/accounts/{account_id}/sub_accounts/{id}
     - Cannot delete an account with active courses or active sub_accounts. Cannot delete a root_account
     - parameter accountId: (path) ID 
     - parameter id: (path) ID 
     - returns: RequestBuilder<Account> 
     */
    open class func deleteSubAccountWithRequestBuilder(accountId: String, id: String) -> RequestBuilder<Account> {
        var path = "/v1/accounts/{account_id}/sub_accounts/{id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a user from the root account
     
     - parameter accountId: (path) ID 
     - parameter userId: (path) ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserFromRootAccount(accountId: String, userId: String, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        deleteUserFromRootAccountWithRequestBuilder(accountId: accountId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a user from the root account
     - DELETE /v1/accounts/{account_id}/users/{user_id}
     - Delete a user record from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts.  WARNING: This API will allow a user to remove themselves from the account. If they do this, they won't be able to make API calls or log into Canvas at that account.
     - parameter accountId: (path) ID 
     - parameter userId: (path) ID 
     - returns: RequestBuilder<User> 
     */
    open class func deleteUserFromRootAccountWithRequestBuilder(accountId: String, userId: String) -> RequestBuilder<User> {
        var path = "/v1/accounts/{account_id}/users/{user_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single account
     
     - parameter id: (path) ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSingleAccount(id: String, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        getSingleAccountWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a single account
     - GET /v1/accounts/{id}
     - Retrieve information on an individual account, given by id or sis sis_account_id.
     - parameter id: (path) ID 
     - returns: RequestBuilder<Account> 
     */
    open class func getSingleAccountWithRequestBuilder(id: String) -> RequestBuilder<Account> {
        var path = "/v1/accounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the sub-accounts of an account
     
     - parameter accountId: (path) ID 
     - parameter recursive: (query) If true, the entire account tree underneath this account will be returned (though still paginated). If false, only direct sub-accounts of this account will be returned. Defaults to false. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubAccountsOfAccount(accountId: String, recursive: Bool? = nil, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        getSubAccountsOfAccountWithRequestBuilder(accountId: accountId, recursive: recursive).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the sub-accounts of an account
     - GET /v1/accounts/{account_id}/sub_accounts
     - List accounts that are sub-accounts of the given account.
     - parameter accountId: (path) ID 
     - parameter recursive: (query) If true, the entire account tree underneath this account will be returned (though still paginated). If false, only direct sub-accounts of this account will be returned. Defaults to false. (optional)
     - returns: RequestBuilder<[Account]> 
     */
    open class func getSubAccountsOfAccountWithRequestBuilder(accountId: String, recursive: Bool? = nil) -> RequestBuilder<[Account]> {
        var path = "/v1/accounts/{account_id}/sub_accounts"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "recursive": recursive?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Account]>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter include
     */
    public enum Include_listAccounts: String, CaseIterable {
    }

    /**
     List accounts
     
     - parameter include: (query) Array of additional information to include.  \&quot;lti_guid\&quot;:: the &#39;tool_consumer_instance_guid&#39; that will be sent for this account on LTI launches \&quot;registration_settings\&quot;:: returns info about the privacy policy and terms of use \&quot;services\&quot;:: returns services and whether they are enabled (requires account management permissions) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccounts(include: [String]? = nil, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        listAccountsWithRequestBuilder(include: include).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List accounts
     - GET /v1/accounts
     - A paginated list of accounts that the current user can view or manage. Typically, students and even teachers will get an empty list in response, only account admins can view the accounts that they are in.
     - parameter include: (query) Array of additional information to include.  \&quot;lti_guid\&quot;:: the &#39;tool_consumer_instance_guid&#39; that will be sent for this account on LTI launches \&quot;registration_settings\&quot;:: returns info about the privacy policy and terms of use \&quot;services\&quot;:: returns services and whether they are enabled (requires account management permissions) (optional)
     - returns: RequestBuilder<[Account]> 
     */
    open class func listAccountsWithRequestBuilder(include: [String]? = nil) -> RequestBuilder<[Account]> {
        let path = "/v1/accounts"
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Account]>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List accounts for course admins
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountsForCourseAdmins(apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        listAccountsForCourseAdminsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List accounts for course admins
     - GET /v1/course_accounts
     - A paginated list of accounts that the current user can view through their admin course enrollments. (Teacher, TA, or designer enrollments). Only returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"
     - returns: RequestBuilder<[Account]> 
     */
    open class func listAccountsForCourseAdminsWithRequestBuilder() -> RequestBuilder<[Account]> {
        let path = "/v1/course_accounts"
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Account]>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter enrollmentType
     */
    public enum EnrollmentType_listActiveCoursesInAccount: String, CaseIterable {
    }

    /**
     * enum for parameter state
     */
    public enum State_listActiveCoursesInAccount: String, CaseIterable {
    }

    /**
     * enum for parameter include
     */
    public enum Include_listActiveCoursesInAccount: String, CaseIterable {
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_listActiveCoursesInAccount: String, CaseIterable {
        case courseName = "course_name"
        case sisCourseId = "sis_course_id"
        case teacher = "teacher"
        case subaccount = "subaccount"
        case totalStudents = "total_students"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listActiveCoursesInAccount: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter searchBy
     */
    public enum SearchBy_listActiveCoursesInAccount: String, CaseIterable {
        case course = "course"
        case teacher = "teacher"
    }

    /**
     List active courses in an account
     
     - parameter accountId: (path) ID 
     - parameter withEnrollments: (query) If true, include only courses with at least one enrollment.  If false, include only courses with no enrollments.  If not present, do not filter on course enrollment status. (optional)
     - parameter enrollmentType: (query) If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment types. (optional)
     - parameter published: (query) If true, include only published courses.  If false, exclude published courses.  If not present, do not filter on published status. (optional)
     - parameter completed: (query) If true, include only completed courses (these may be in state &#39;completed&#39;, or their enrollment term may have ended).  If false, exclude completed courses.  If not present, do not filter on completed status. (optional)
     - parameter blueprint: (query) If true, include only blueprint courses. If false, exclude them. If not present, do not filter on this basis. (optional)
     - parameter blueprintAssociated: (query) If true, include only courses that inherit content from a blueprint course. If false, exclude them. If not present, do not filter on this basis. (optional)
     - parameter byTeachers: (query) List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users. (optional)
     - parameter bySubaccounts: (query) List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts. (optional)
     - parameter hideEnrollmentlessCourses: (query) If present, only return courses that have at least one enrollment. Equivalent to &#39;with_enrollments&#x3D;true&#39;; retained for compatibility. (optional)
     - parameter state: (query) If set, only return courses that are in the given state(s). By default, all states but \&quot;deleted\&quot; are returned. (optional)
     - parameter enrollmentTermId: (query) If set, only includes courses from the specified term. (optional)
     - parameter searchTerm: (query) The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters. (optional)
     - parameter include: (query) - All explanations can be seen in the {api:CoursesController#index Course API index documentation} - \&quot;sections\&quot;, \&quot;needs_grading_count\&quot; and \&quot;total_scores\&quot; are not valid options at the account level (optional)
     - parameter sort: (query) The column to sort results by. (optional)
     - parameter order: (query) The order to sort the given column by. (optional)
     - parameter searchBy: (query) The filter to search by. \&quot;course\&quot; searches for course names, course codes, and SIS IDs. \&quot;teacher\&quot; searches for teacher names (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listActiveCoursesInAccount(accountId: String, withEnrollments: Bool? = nil, enrollmentType: [String]? = nil, published: Bool? = nil, completed: Bool? = nil, blueprint: Bool? = nil, blueprintAssociated: Bool? = nil, byTeachers: [Int]? = nil, bySubaccounts: [Int]? = nil, hideEnrollmentlessCourses: Bool? = nil, state: [String]? = nil, enrollmentTermId: Int64? = nil, searchTerm: String? = nil, include: [String]? = nil, sort: Sort_listActiveCoursesInAccount? = nil, order: Order_listActiveCoursesInAccount? = nil, searchBy: SearchBy_listActiveCoursesInAccount? = nil, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: [Course]?,_ error: Error?) -> Void)) {
        listActiveCoursesInAccountWithRequestBuilder(accountId: accountId, withEnrollments: withEnrollments, enrollmentType: enrollmentType, published: published, completed: completed, blueprint: blueprint, blueprintAssociated: blueprintAssociated, byTeachers: byTeachers, bySubaccounts: bySubaccounts, hideEnrollmentlessCourses: hideEnrollmentlessCourses, state: state, enrollmentTermId: enrollmentTermId, searchTerm: searchTerm, include: include, sort: sort, order: order, searchBy: searchBy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List active courses in an account
     - GET /v1/accounts/{account_id}/courses
     - Retrieve a paginated list of courses in this account.
     - parameter accountId: (path) ID 
     - parameter withEnrollments: (query) If true, include only courses with at least one enrollment.  If false, include only courses with no enrollments.  If not present, do not filter on course enrollment status. (optional)
     - parameter enrollmentType: (query) If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment types. (optional)
     - parameter published: (query) If true, include only published courses.  If false, exclude published courses.  If not present, do not filter on published status. (optional)
     - parameter completed: (query) If true, include only completed courses (these may be in state &#39;completed&#39;, or their enrollment term may have ended).  If false, exclude completed courses.  If not present, do not filter on completed status. (optional)
     - parameter blueprint: (query) If true, include only blueprint courses. If false, exclude them. If not present, do not filter on this basis. (optional)
     - parameter blueprintAssociated: (query) If true, include only courses that inherit content from a blueprint course. If false, exclude them. If not present, do not filter on this basis. (optional)
     - parameter byTeachers: (query) List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users. (optional)
     - parameter bySubaccounts: (query) List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts. (optional)
     - parameter hideEnrollmentlessCourses: (query) If present, only return courses that have at least one enrollment. Equivalent to &#39;with_enrollments&#x3D;true&#39;; retained for compatibility. (optional)
     - parameter state: (query) If set, only return courses that are in the given state(s). By default, all states but \&quot;deleted\&quot; are returned. (optional)
     - parameter enrollmentTermId: (query) If set, only includes courses from the specified term. (optional)
     - parameter searchTerm: (query) The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters. (optional)
     - parameter include: (query) - All explanations can be seen in the {api:CoursesController#index Course API index documentation} - \&quot;sections\&quot;, \&quot;needs_grading_count\&quot; and \&quot;total_scores\&quot; are not valid options at the account level (optional)
     - parameter sort: (query) The column to sort results by. (optional)
     - parameter order: (query) The order to sort the given column by. (optional)
     - parameter searchBy: (query) The filter to search by. \&quot;course\&quot; searches for course names, course codes, and SIS IDs. \&quot;teacher\&quot; searches for teacher names (optional)
     - returns: RequestBuilder<[Course]> 
     */
    open class func listActiveCoursesInAccountWithRequestBuilder(accountId: String, withEnrollments: Bool? = nil, enrollmentType: [String]? = nil, published: Bool? = nil, completed: Bool? = nil, blueprint: Bool? = nil, blueprintAssociated: Bool? = nil, byTeachers: [Int]? = nil, bySubaccounts: [Int]? = nil, hideEnrollmentlessCourses: Bool? = nil, state: [String]? = nil, enrollmentTermId: Int64? = nil, searchTerm: String? = nil, include: [String]? = nil, sort: Sort_listActiveCoursesInAccount? = nil, order: Order_listActiveCoursesInAccount? = nil, searchBy: SearchBy_listActiveCoursesInAccount? = nil) -> RequestBuilder<[Course]> {
        var path = "/v1/accounts/{account_id}/courses"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "with_enrollments": withEnrollments?.encodeToJSON(), 
            "enrollment_type": enrollmentType?.encodeToJSON(), 
            "published": published?.encodeToJSON(), 
            "completed": completed?.encodeToJSON(), 
            "blueprint": blueprint?.encodeToJSON(), 
            "blueprint_associated": blueprintAssociated?.encodeToJSON(), 
            "by_teachers": byTeachers?.encodeToJSON(), 
            "by_subaccounts": bySubaccounts?.encodeToJSON(), 
            "hide_enrollmentless_courses": hideEnrollmentlessCourses?.encodeToJSON(), 
            "state": state?.encodeToJSON(), 
            "enrollment_term_id": enrollmentTermId?.encodeToJSON(), 
            "search_term": searchTerm?.encodeToJSON(), 
            "include": include?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "order": order?.encodeToJSON(), 
            "search_by": searchBy?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Course]>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the terms of service for that account
     
     - parameter accountId: (path) ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnsTermsOfServiceForThatAccount(accountId: String, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: TermsOfService?,_ error: Error?) -> Void)) {
        returnsTermsOfServiceForThatAccountWithRequestBuilder(accountId: accountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns the terms of service for that account
     - GET /v1/accounts/{account_id}/terms_of_service
     - parameter accountId: (path) ID 
     - returns: RequestBuilder<TermsOfService> 
     */
    open class func returnsTermsOfServiceForThatAccountWithRequestBuilder(accountId: String) -> RequestBuilder<TermsOfService> {
        var path = "/v1/accounts/{account_id}/terms_of_service"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TermsOfService>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an account
     
     - parameter id: (path) ID 
     - parameter accountName: (form) Updates the account name (optional)
     - parameter accountSisAccountId: (form) Updates the account sis_account_id Must have manage_sis permission and must not be a root_account. (optional)
     - parameter accountDefaultTimeZone: (form) The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}. (optional)
     - parameter accountDefaultStorageQuotaMb: (form) The default course storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultUserStorageQuotaMb: (form) The default user storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultGroupStorageQuotaMb: (form) The default group storage quota to be used, if not otherwise specified. (optional)
     - parameter accountSettingsRestrictStudentPastViewValue: (form) Restrict students from viewing courses after end date (optional)
     - parameter accountSettingsRestrictStudentPastViewLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsRestrictStudentFutureViewValue: (form) Restrict students from viewing courses before start date (optional)
     - parameter accountSettingsRestrictStudentFutureViewLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsLockAllAnnouncementsValue: (form) Disable comments on announcements (optional)
     - parameter accountSettingsLockAllAnnouncementsLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsRestrictStudentFutureListingValue: (form) Restrict students from viewing future enrollments in course list (optional)
     - parameter accountSettingsRestrictStudentFutureListingLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountServices: (form) Give this a set of keys and boolean values to enable or disable services matching the keys (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAccount(id: String, accountName: String? = nil, accountSisAccountId: String? = nil, accountDefaultTimeZone: String? = nil, accountDefaultStorageQuotaMb: Int64? = nil, accountDefaultUserStorageQuotaMb: Int64? = nil, accountDefaultGroupStorageQuotaMb: Int64? = nil, accountSettingsRestrictStudentPastViewValue: Bool? = nil, accountSettingsRestrictStudentPastViewLocked: Bool? = nil, accountSettingsRestrictStudentFutureViewValue: Bool? = nil, accountSettingsRestrictStudentFutureViewLocked: Bool? = nil, accountSettingsLockAllAnnouncementsValue: Bool? = nil, accountSettingsLockAllAnnouncementsLocked: Bool? = nil, accountSettingsRestrictStudentFutureListingValue: Bool? = nil, accountSettingsRestrictStudentFutureListingLocked: Bool? = nil, accountServices: AnyType? = nil, apiResponseQueue: DispatchQueue = CanvasAccountKitAPI.apiResponseQueue, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        updateAccountWithRequestBuilder(id: id, accountName: accountName, accountSisAccountId: accountSisAccountId, accountDefaultTimeZone: accountDefaultTimeZone, accountDefaultStorageQuotaMb: accountDefaultStorageQuotaMb, accountDefaultUserStorageQuotaMb: accountDefaultUserStorageQuotaMb, accountDefaultGroupStorageQuotaMb: accountDefaultGroupStorageQuotaMb, accountSettingsRestrictStudentPastViewValue: accountSettingsRestrictStudentPastViewValue, accountSettingsRestrictStudentPastViewLocked: accountSettingsRestrictStudentPastViewLocked, accountSettingsRestrictStudentFutureViewValue: accountSettingsRestrictStudentFutureViewValue, accountSettingsRestrictStudentFutureViewLocked: accountSettingsRestrictStudentFutureViewLocked, accountSettingsLockAllAnnouncementsValue: accountSettingsLockAllAnnouncementsValue, accountSettingsLockAllAnnouncementsLocked: accountSettingsLockAllAnnouncementsLocked, accountSettingsRestrictStudentFutureListingValue: accountSettingsRestrictStudentFutureListingValue, accountSettingsRestrictStudentFutureListingLocked: accountSettingsRestrictStudentFutureListingLocked, accountServices: accountServices).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an account
     - PUT /v1/accounts/{id}
     - Update an existing account.
     - parameter id: (path) ID 
     - parameter accountName: (form) Updates the account name (optional)
     - parameter accountSisAccountId: (form) Updates the account sis_account_id Must have manage_sis permission and must not be a root_account. (optional)
     - parameter accountDefaultTimeZone: (form) The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}. (optional)
     - parameter accountDefaultStorageQuotaMb: (form) The default course storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultUserStorageQuotaMb: (form) The default user storage quota to be used, if not otherwise specified. (optional)
     - parameter accountDefaultGroupStorageQuotaMb: (form) The default group storage quota to be used, if not otherwise specified. (optional)
     - parameter accountSettingsRestrictStudentPastViewValue: (form) Restrict students from viewing courses after end date (optional)
     - parameter accountSettingsRestrictStudentPastViewLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsRestrictStudentFutureViewValue: (form) Restrict students from viewing courses before start date (optional)
     - parameter accountSettingsRestrictStudentFutureViewLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsLockAllAnnouncementsValue: (form) Disable comments on announcements (optional)
     - parameter accountSettingsLockAllAnnouncementsLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountSettingsRestrictStudentFutureListingValue: (form) Restrict students from viewing future enrollments in course list (optional)
     - parameter accountSettingsRestrictStudentFutureListingLocked: (form) Lock this setting for sub-accounts and courses (optional)
     - parameter accountServices: (form) Give this a set of keys and boolean values to enable or disable services matching the keys (optional)
     - returns: RequestBuilder<Account> 
     */
    open class func updateAccountWithRequestBuilder(id: String, accountName: String? = nil, accountSisAccountId: String? = nil, accountDefaultTimeZone: String? = nil, accountDefaultStorageQuotaMb: Int64? = nil, accountDefaultUserStorageQuotaMb: Int64? = nil, accountDefaultGroupStorageQuotaMb: Int64? = nil, accountSettingsRestrictStudentPastViewValue: Bool? = nil, accountSettingsRestrictStudentPastViewLocked: Bool? = nil, accountSettingsRestrictStudentFutureViewValue: Bool? = nil, accountSettingsRestrictStudentFutureViewLocked: Bool? = nil, accountSettingsLockAllAnnouncementsValue: Bool? = nil, accountSettingsLockAllAnnouncementsLocked: Bool? = nil, accountSettingsRestrictStudentFutureListingValue: Bool? = nil, accountSettingsRestrictStudentFutureListingLocked: Bool? = nil, accountServices: AnyType? = nil) -> RequestBuilder<Account> {
        var path = "/v1/accounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = CanvasAccountKitAPI.basePath + path
        let formParams: [String:Any?] = [
            "account[name]": accountName?.encodeToJSON(),
            "account[sis_account_id]": accountSisAccountId?.encodeToJSON(),
            "account[default_time_zone]": accountDefaultTimeZone?.encodeToJSON(),
            "account[default_storage_quota_mb]": accountDefaultStorageQuotaMb?.encodeToJSON(),
            "account[default_user_storage_quota_mb]": accountDefaultUserStorageQuotaMb?.encodeToJSON(),
            "account[default_group_storage_quota_mb]": accountDefaultGroupStorageQuotaMb?.encodeToJSON(),
            "account[settings][restrict_student_past_view][value]": accountSettingsRestrictStudentPastViewValue?.encodeToJSON(),
            "account[settings][restrict_student_past_view][locked]": accountSettingsRestrictStudentPastViewLocked?.encodeToJSON(),
            "account[settings][restrict_student_future_view][value]": accountSettingsRestrictStudentFutureViewValue?.encodeToJSON(),
            "account[settings][restrict_student_future_view][locked]": accountSettingsRestrictStudentFutureViewLocked?.encodeToJSON(),
            "account[settings][lock_all_announcements][value]": accountSettingsLockAllAnnouncementsValue?.encodeToJSON(),
            "account[settings][lock_all_announcements][locked]": accountSettingsLockAllAnnouncementsLocked?.encodeToJSON(),
            "account[settings][restrict_student_future_listing][value]": accountSettingsRestrictStudentFutureListingValue?.encodeToJSON(),
            "account[settings][restrict_student_future_listing][locked]": accountSettingsRestrictStudentFutureListingLocked?.encodeToJSON(),
            "account[services]": accountServices?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = CanvasAccountKitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
